#include <iostream>
using namespace std;

#include "hid_parser.h"

// From the steelseries mouse
unsigned char desc[] =  {
    //Steelseries Rival 600
    0x05, 0x01, 0x09, 0x02, 0xA1, 0x01, 0x09, 0x01, 0xA1, 0x00, 0xA1, 0x02, 0x05, 0x09, 0x19, 0x01,
    0x29, 0x08, 0x15, 0x00, 0x25, 0x01, 0x95, 0x08, 0x75, 0x01, 0x81, 0x02, 0x05, 0x01, 0x09, 0x30,
    0x09, 0x31, 0x16, 0x01, 0x80, 0x26, 0xFF, 0x7F, 0x75, 0x10, 0x95, 0x02, 0x81, 0x06, 0x09, 0x38,
    0x15, 0x81, 0x25, 0x7F, 0x75, 0x08, 0x95, 0x01, 0x81, 0x06, 0xC0, 0xA1, 0x02, 0x05, 0x0C, 0x0A,
    0x38, 0x02, 0x15, 0x81, 0x25, 0x7F, 0x75, 0x08, 0x95, 0x01, 0x81, 0x06, 0xC0, 0xA1, 0x02, 0x06,
    0xC1, 0xFF, 0x15, 0x00, 0x26, 0xFF, 0x00, 0x75, 0x08, 0x09, 0xF0, 0x95, 0x02, 0x81, 0x02, 0xC0,
    0xC0, 0xC0
    
    /*
    // Logitech G5
    0x05, 0x01, 0x09, 0x02, 0xA1, 0x01, 0x09, 0x01, 0xA1, 0x00, 0x05, 0x09, 0x19, 0x01, 0x29, 0x08,
    0x15, 0x00, 0x25, 0x01, 0x95, 0x08, 0x75, 0x01, 0x81, 0x02, 0x06, 0x00, 0xFF, 0x09, 0x40, 0x15,
    0x81, 0x25, 0x7F, 0x75, 0x08, 0x95, 0x02, 0x81, 0x02, 0x05, 0x01, 0x09, 0x38, 0x95, 0x01, 0x81,
    0x06, 0x05, 0x0C, 0x0A, 0x38, 0x02, 0x95, 0x01, 0x81, 0x06, 0x05, 0x01, 0x16, 0x01, 0x80, 0x26,
    0xFF, 0x7F, 0x75, 0x10, 0x95, 0x02, 0x09, 0x30, 0x09, 0x31, 0x81, 0x06, 0x05, 0x09, 0x19, 0x09,
    0x29, 0x10, 0x15, 0x00, 0x25, 0x01, 0x95, 0x08, 0x75, 0x01, 0x81, 0x02, 0xC0, 0xC0
    */

    /*
    //Coolermaster mm710
    0x05, 0x01, 0x09, 0x02, 0xA1, 0x01, 0x09, 0x01, 0xA1, 0x00, 0x05, 0x09, 0x19, 0x01, 0x29, 0x10,
    0x15, 0x00, 0x25, 0x01, 0x75, 0x01, 0x95, 0x10, 0x81, 0x02, 0x05, 0x01, 0x09, 0x30, 0x09, 0x31,
    0x16, 0x01, 0x80, 0x26, 0xFF, 0x7F, 0x75, 0x10, 0x95, 0x02, 0x81, 0x06, 0x09, 0x38, 0x15, 0x81,
    0x25, 0x7F, 0x75, 0x08, 0x95, 0x01, 0x81, 0x06, 0x05, 0x0C, 0x0A, 0x38, 0x02, 0x95, 0x01, 0x81,
    0x06, 0xC0, 0xC0
    */

    /*
    //Swiftpoint tracer
    0x05, 0x01, 0x09, 0x02, 0xA1, 0x01, 0x85, 0x01, 0x09, 0x01, 0xA1, 0x00, 0x95, 0x10, 0x75, 0x01,
    0x05, 0x09, 0x19, 0x01, 0x29, 0x10, 0x15, 0x00, 0x25, 0x01, 0x81, 0x02, 0x75, 0x10, 0x95, 0x02,
    0x05, 0x01, 0x09, 0x30, 0x09, 0x31, 0x16, 0x01, 0x80, 0x26, 0xFF, 0x7F, 0x81, 0x06, 0xA1, 0x02,
    0x85, 0x02, 0x09, 0x48, 0x95, 0x01, 0x75, 0x02, 0x15, 0x00, 0x25, 0x01, 0x35, 0x01, 0x45, 0x78,
    0xB1, 0x02, 0x85, 0x01, 0x75, 0x10, 0x95, 0x01, 0x09, 0x38, 0x35, 0x00, 0x45, 0x00, 0x16, 0x01,
    0x80, 0x26, 0xFF, 0x7F, 0x81, 0x06, 0xC0, 0xA1, 0x02, 0x85, 0x02, 0x09, 0x48, 0x95, 0x01, 0x75,
    0x02, 0x15, 0x00, 0x25, 0x01, 0x35, 0x01, 0x45, 0x78, 0xB1, 0x02, 0x35, 0x00, 0x45, 0x00, 0x75,
    0x04, 0xB1, 0x03, 0x85, 0x01, 0x75, 0x10, 0x95, 0x01, 0x05, 0x0C, 0x0A, 0x38, 0x02, 0x16, 0x01,
    0x80, 0x26, 0xFF, 0x7F, 0x81, 0x06, 0xC0, 0xC0, 0xC0
    */
};

//Stores the bit offset and byte size in the raw reported data structure of usb_mouse::data
struct report_data {
	unsigned char offset;	// In bits
	unsigned char size;		// In bits
};

//Stores a collection of important offsets & sizes for report data in usb_mouse::data
struct report_structure {
	struct report_data button;
	struct report_data x;
	struct report_data y;
	struct report_data wheel;
};

//Length of "ctl word + data"
inline int c_len(const unsigned char c){
    switch(c){
        case D_END_COLLECTION: return 1;
        case D_USAGE_MB: return 3;
        case D_USAGE_PAGE_MB: return 3;
        case D_LOGICAL_MAXIMUM_MB: return 3;
        case D_LOGICAL_MINIMUM_MB: return 3;
    }
    
    return 2;
}

//This is the most crudest HID descriptor parser EVER.
//We will skip most control words until we found an interesting one
//We also assume, that the first button-definition we will find is the most important one,
//so we will ignore any further button definitions
int parse_report_desc(unsigned char* data, size_t data_len, report_structure* data_struct){
    int r_count, r_size, r_usage_a = 0, r_usage_b = 0;
    unsigned char c, d, button;

    unsigned int offset = 0;    //Offset in bits

    unsigned int i = 0;
    while(i < data_len){
        c = data[i];                // Control word
        if(i < data_len) d = data[i+1];  // Data after control word

        //Determine the size
        if(c == D_REPORT_SIZE)  r_size = (int) d;
        if(c == D_REPORT_COUNT) r_count = (int) d;

        //Determine the usage
        if(c == D_USAGE_PAGE || c == D_USAGE){
            if(
                d == D_USAGE_BUTTON ||
                d == D_USAGE_WHEEL ||
                d == D_USAGE_X ||
                d == D_USAGE_Y
            ) {
                if(!r_usage_a){
                    r_usage_a = (int) d;
                } else {
                    r_usage_b = (int) d;
                }
            }
        }

        //Check, if we reached the end of this input data type
        if(c == D_INPUT || c == D_FEATURE){
            //Assign usage to data_struct
            if(!button && r_usage_a == D_USAGE_BUTTON){
                data_struct->button.offset = offset;
                data_struct->button.size = r_size*r_count;
                button = 1;
            }
            switch(r_usage_a){
                case D_USAGE_X:
                    data_struct->x.offset = offset;
                    data_struct->x.size = r_size;
                case D_USAGE_Y:
                    data_struct->x.offset = offset;
                    data_struct->x.size = r_size;
            }
             switch(r_usage_b){
                case D_USAGE_X:
                    data_struct->y.offset = offset + r_size;
                    data_struct->y.size = r_size;
                case D_USAGE_Y:
                    data_struct->y.offset = offset + r_size;
                    data_struct->y.size = r_size;
            }
            if(r_usage_a == D_USAGE_WHEEL){
                data_struct->wheel.offset = offset;
                data_struct->wheel.size = r_size*r_count;
            }
            
            r_usage_a = 0;
            r_usage_b = 0;
            offset += r_size*r_count;
        }
        i += c_len(c);
    }

    return 0;
}


int main(){
    report_structure data_struct;
    parse_report_desc(desc, sizeof(desc)/sizeof(char), &data_struct);
    cout << "Button: Offset " << (unsigned int) data_struct.button.offset << " Size " << (unsigned int) data_struct.button.size << endl;
    cout << "X: Offset " << (unsigned int) data_struct.x.offset << " Size " << (unsigned int) data_struct.x.size << endl;
    cout << "Y: Offset " << (unsigned int) data_struct.y.offset << " Size " << (unsigned int) data_struct.y.size << endl;
    cout << "Wheel: Offset " << (unsigned int) data_struct.wheel.offset << " Size " << (unsigned int) data_struct.wheel.size << endl;
    return 0;
}